package tree

//平衡二叉树AVL
/*
 1.平衡二叉树是一颗二叉排序树,其中每一个结点的左子树和右子树的高度差<=1
 2.平衡因子:二叉树结点的左子树的深度-右子树的深度的值,BF, 0, -1, 1
 */
type AVLNode struct {
	data   int      //数据
	bf     int      //平衡因子
	lChild *AVLNode //左子树
	rChild *AVLNode //右子树
}

//B树(Balance-tree):平衡的多路查找树
/*
B树是一种平衡的多路查找树,结点最大的孩子数目称为B树的阶order
在大数据存储过程，大量的数据会存储到外存磁盘，外存磁盘中读取与写入某数据的时候，首先定位到磁盘中的某一块，这就有个问题：
如何才能有效的查找磁盘中的数据呢，这就需要一种高效的外存数据结构，也就引出了下面的课题

B树中所有结点中孩子结点个数的最大值,通常用m来表示(m>=3),称为m阶B树

 */
 //B树的定义
type BNode struct {


}
