第五章:串
1.一些概念
 1)定义:由0个或多个字符组成的有限序列,也叫做字符串。记做s= "a1a2....an" >=0
 2)0个字符的串称为空串,null string,直接用""表示
 3)既然是序列，也就说明串的相邻字符之间有前驱和后继的关系
 4)子串与主串,串中任意个数的连续字符组成的子序列称该串的子串,相应地,包含子串的串称为主串。
   子串在主串中的位置就是子串的第一个字符再珠串中的序号。

2.串的比较
  串的比较是通过组成串的字符之间编码来进行的，而字符的编码指的是字符在对应字符集中的序号。
  从ASCII码->Unicode编码
  给定两个串, s="a1a2....an"  t="b1b2...bm"
  1)相等的定义:当且仅当n==m且ai==bi,(i从1~n)
  2)两个不相等的串,如何比较大小呢？
    当满足以下条件之一时,s < t
    I.n < m, 且ai==bi(i=1,2,...n)
      比如:s="hap", t="happy", n=3, m=5, 且a1=b1,a2=b2,a3=b3
    II.存在某个K<=min(m,n),使得ai=bi,i=1,2,..k-1,都有ai=bi,但ak<bk
      比如:s="happen", t="happy",存在k=5,使得a1~a4=b1~b4,但是第五个开始,a5=e < b5=y
      可以想象英语词典的单词
3.串的抽象数据类型
  串的逻辑结构与线性表类似,但关注点不同,串的每个元素都是字符
  线性表更关注的是单个元素的操作,比如查找,删除一个元素,串更多的是查找子串位置,替换子串等。
  这里说一下ADT,是计算机科学中具有类似行为的特定类别的数据结构的数学模型
  你可以简单理解为你所设计的类,或者改数据结构以及其对应的操作的集合
  =====================================================================
  ADT 串(string)
  Data
      串中元素仅有一个字符组成,相邻元素具有前驱和后继的关系
  Operation
      StrAssign(T, *chars):生成一个其值等于字符串常量chars的串T
      StrCopy(T, S):若串S存在,则S拷贝得串T
      ClearString(S):串S存在，则清空
      StringEmpty(s):串判空
      StrLength(S):返回S的元素个数
      StrCompare(S,T):若S>T,返回值>0,S==T,返回0,S<T,返回值<0
      Concat(T,S1,S2):用T返回由S1,S2连接而成的新串
      SubString(Sub,S,pos,len):若串S存在,pos[1,StrLength(S)],且len[0, StrLength(S)-pos+1]
                              返回从第pos个字符开始的长度为len的子串
      Index(S,T,pos),返回子串T在主串S中在pos个字符后第一次出现的位置,否则返回0
      Replace(S,T,V):串S,T,V存在,T是非空串,用V来替换主串S中出现的所有与T相等的不重叠子串
      StrInsert(S,pos,T):在串S的第pos个字符之前插入串T
      StrDelete(S,pos,len):从串S中删除从第pos个字符开始,len长度的子串
  endADT
4.串的存储结构
  1)顺序存储
  2)链式存储还需要考虑每个结点具体多个字符存储会比较好一点,会比较麻烦
  考虑使用顺序存储方式来实现串

5.朴素的模式匹配
  1.核心思想是如果相等,则同时前进,
  2.如果不等,子串指针归零,主串指针回溯,所以需要记录下每次比较时主串的开始指针的下标
  3.退出条件:主串扫描到尾还没匹配成功,或者子串被扫描完成匹配成功
6.KMP模式匹配