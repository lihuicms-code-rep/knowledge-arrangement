package main

//题目15:剪绳子I
/*
  给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1）;，
  每段绳子的长度记为 k[0],k[1]...k[m] 。请问 k[0]*k[1]*...*k[m] 可能的最大乘积是多少？
  例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 */

/*
  动态规划问题:求一个问题的最优解,一般是最大值或者最小值,而这个问题能分解为更小的问题
 */

//动态规则的解法
//输入长度为n绳子,算出最大乘积
//设f(n)为长度为n的绳子的解法,在第i个位置(i>0&&i<n)处剪一刀
//分成f(i)和f(n-i)两段
//f(n) = max(f(i)*f(n-i))
func cuttingRope(n int) int {
	if n < 2 {
		return 0
	}

	if n == 2 {
		return 1
	}

	if n == 3 {
		return 2
	}

	//已有的子问题的

	for i := 4; i <= n; i++ {

	}
}

//
